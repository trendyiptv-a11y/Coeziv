import OpenAI from "openai";

export default async function handler(req, res) {
  try {
    const { textDeAnalizat } = req.body || {};
    if (!textDeAnalizat)
      return res.status(400).json({ success: false, error: "LipseÈ™te textul pentru analizÄƒ." });

    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

    // ğŸ§  Pas 1 â€” verificare factualÄƒ live
    const search = await client.responses.create({
      model: "gpt-5",
      tools: [{ type: "web_search" }],
      input: [
        {
          role: "user",
          content: `VerificÄƒ factual urmÄƒtorul text È™i explicÄƒ dacÄƒ este confirmat, parÈ›ial confirmat sau fals.
                    Include sursele principale È™i oferÄƒ un scurt rezumat: "${textDeAnalizat}"`,
        },
      ],
    });

    const webAnswer = search.output_text || "Nu s-au gÄƒsit surse clare.";
    const webSources =
      search.output?.[0]?.citations?.map((c) => c.url) ||
      search.output?.[0]?.references?.map((r) => r.url) ||
      [];

    // ğŸ§  Pas 2 â€” analizÄƒ semanticÄƒ (Formula 3.14Î”)
    const analyze = await client.chat.completions.create({
      model: "gpt-5",
      messages: [
        {
          role: "system",
          content: `
Tu eÈ™ti motorul Formula 3.14Î”. CalculeazÄƒ:
Î” Ã®ntre 0â€“6.28, Fc = 3.14 - |Î” - 3.14|/3.14,
Manipulare% = (1 - Fc/3.14)*100.
EvalueazÄƒ coeziunea, adevÄƒrul logic È™i manipularea.`,
        },
        { role: "user", content: textDeAnalizat },
      ],
    });

    const raw = analyze.choices[0].message.content;
    const delta = parseFloat(raw.match(/Î”\s*=?\s*([\d.]+)/)?.[1]) || 3.14;
    const fc = parseFloat(raw.match(/Fc\s*=?\s*([\d.]+)/)?.[1]) || 3.14;
    const manipulare = parseFloat(raw.match(/manipulare\s*=?\s*([\d.]+)/)?.[1]) || Math.max(0, (1 - fc / 3.14) * 100);

    // âœ… CombinÄƒm rezultatele (cu surse clickabile)
return res.status(200).json({
  success: true,
  rezultat: {
    // text combinat pentru afiÈ™area completÄƒ Ã®n UI
    text: `ğŸ§© AnalizÄƒ factualÄƒ:\n${webAnswer}\n\nğŸ“Š AnalizÄƒ semanticÄƒ:\nÎ” = ${delta}\nFc = ${fc}\nManipulare% = ${manipulare}`,
    fc,
    delta,
    manipulare,
    // ğŸ”— Formatare surse clickabile
    surse: (webSources || []).map((src, index) => {
      if (typeof src === "object" && src.url) {
        return { title: src.title || `SursÄƒ ${index + 1}`, url: src.url };
      }
      return { title: `SursÄƒ ${index + 1}`, url: src };
    }),
  },
});
  } catch (err) {
    console.error("Eroare analizÄƒ completÄƒ:", err);
    return res.status(500).json({ success: false, error: err.message });
  }
}
