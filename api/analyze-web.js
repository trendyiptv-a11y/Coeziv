import OpenAI from "openai";

export default async function handler(req, res) {
  try {
    const { textDeAnalizat } = req.body || {};
    if (!textDeAnalizat)
      return res.status(400).json({ success: false, error: "Lipse√à‚Ñ¢te textul pentru analiz√Ñ∆í." });

    const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

    // üß† Pas 1 ‚Äî verificare factualƒÉ live
const search = await client.chat.completions.create({
  model: "gpt-5",
  messages: [
    {
      role: "system",
      content: `E»ôti un verificator factual. AnalizeazƒÉ textul »ôi √Æntoarce surse externe reale (cu https://...)`,
    },
    {
      role: "user",
      content: `
VerificƒÉ factual urmƒÉtorul text: "${textDeAnalizat}". 
Include 3‚Äì5 linkuri din surse majore (Reuters, BBC, Wikipedia, etc.).
RƒÉspunde √Æn format:
üß© AnalizƒÉ factualƒÉ:
Verdict: [AdevƒÉrat / Fals / Par»õial adevƒÉrat]
Explica»õie scurtƒÉ: [...]
Surse:
1. [Titlu sursƒÉ](https://...)
2. [Titlu sursƒÉ](https://...)
3. [Titlu sursƒÉ](https://...)
`,
    },
  ],
});

    // √∞≈∏¬ß¬† Pas 2 √¢‚Ç¨‚Äù analiz√Ñ∆í semantic√Ñ∆í (Formula 3.14√é‚Äù)
    const analyze = await client.chat.completions.create({
      model: "gpt-5",
      messages: [
        {
          role: "system",
          content: `
Tu e»ôti motorul oficial de analizƒÉ al proiectului ‚ÄûFormula 3.14Œî‚Äù, creat de Sergiu BulboacƒÉ.

Scopul tƒÉu este sƒÉ evaluezi textele dupƒÉ coeziunea informa»õionalƒÉ, adevƒÉr logic »ôi manipulare semanticƒÉ, astfel:
1Ô∏è‚É£ CalculeazƒÉ valoarea Œî (vibra»õia semanticƒÉ) √Æntre 0.00 »ôi 6.28, unde 3.14 este echilibrul perfect.
2Ô∏è‚É£ CalculeazƒÉ Fc = 3.14 - |Œî - 3.14| / 3.14.
3Ô∏è‚É£ CalculeazƒÉ gradul de manipulare = (1 - Fc / 3.14) √ó 100.
4Ô∏è‚É£ EvalueazƒÉ coeren»õa logicƒÉ, biasul »ôi inten»õia comunicƒÉrii.,'
        },
        { role: "user", content: textDeAnalizat },
      ],
    });

    const raw = analyze.choices[0].message.content;
    const delta = parseFloat(raw.match(/√é‚Äù\s*=?\s*([\d.]+)/)?.[1]) || 3.14;
    const fc = parseFloat(raw.match(/Fc\s*=?\s*([\d.]+)/)?.[1]) || 3.14;
    const manipulare = parseFloat(raw.match(/manipulare\s*=?\s*([\d.]+)/)?.[1]) || Math.max(0, (1 - fc / 3.14) * 100);

    // √¢≈ì‚Ä¶ Combin√Ñ∆ím rezultatele (cu surse clickabile)
return res.status(200).json({
  success: true,
  rezultat: {
    // text combinat pentru afi√à‚Ñ¢area complet√Ñ∆í √É¬Æn UI
    text: `${webAnswer}\n\n√∞≈∏‚Äú≈† Analiz√Ñ∆í semantic√Ñ∆í:\n√é‚Äù = ${delta}\nFc = ${fc}\nManipulare% = ${manipulare}`,
    fc,
    delta,
    manipulare,
    // √∞≈∏‚Äù‚Äî Formatare surse clickabile
    surse:
  webSources && webSources.length > 0
    ? webSources.map((src, index) => {
        if (typeof src === "object" && src.url) {
          return { title: src.title || `Surs√Ñ∆í ${index + 1}`, url: src.url };
        }
        if (typeof src === "string") {
          return { title: `Surs√Ñ∆í ${index + 1}`, url: src };
        }
        return null;
      }).filter(Boolean)
    : null,
  },
});
  } catch (err) {
    console.error("Eroare analiz√Ñ∆í complet√Ñ∆í:", err);
    return res.status(500).json({ success: false, error: err.message });
  }
}
